{"version":3,"sources":["","../../../testWitSources/filelayer/csv2geojson.js"],"names":[],"mappings":"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","file":"C:/Users/Marco/Documents/GitHub/repositoryForTest/out/testWitSources/filelayer/csv2geojson.js","sourcesContent":[null,"!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var o;\"undefined\"!=typeof window?o=window:\"undefined\"!=typeof global?o=global:\"undefined\"!=typeof self&&(o=self),o.csv2geojson=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar dsv = require('dsv'),\n    sexagesimal = require('sexagesimal');\n\nfunction isLat(f) { return !!f.match(/(Lat)(itude)?/gi); }\nfunction isLon(f) { return !!f.match(/(L)(on|ng)(gitude)?/i); }\n\nfunction keyCount(o) {\n    return (typeof o == 'object') ? Object.keys(o).length : 0;\n}\n\nfunction autoDelimiter(x) {\n    var delimiters = [',', '\\t', '|', ';', String.fromCharCode(30), String.fromCharCode(31)];//Modififed\n    var results = [];\n\n    delimiters.forEach(function(delimiter) {\n        var res = dsv(delimiter).parse(x);\n        if (res.length >= 1) {\n            var count = keyCount(res[0]);\n            for (var i = 0; i < res.length; i++) {\n                if (keyCount(res[i]) !== count) return;\n            }\n            results.push({\n                delimiter: delimiter,\n                arity: Object.keys(res[0]).length,\n            });\n        }\n    });\n\n    if (results.length) {\n        return results.sort(function(a, b) {\n            return b.arity - a.arity;\n        })[0].delimiter;\n    } else {\n        return null;\n    }\n}\n\nfunction auto(x) {\n    var delimiter = autoDelimiter(x);\n    if (!delimiter) return null;\n    return dsv(delimiter).parse(x);\n}\n\n/*Usage: csvString, { latfield: 'LATFIELDNAME',lonfield: 'LONFIELDNAME',delimiter: ','},\n function(err, data) {});*/\nfunction csv2geojson(x, options, callback) {\n\n    if (!callback) {\n        callback = options;\n        options = {};\n    }\n\n    options.delimiter = options.delimiter || ',';\n\n    var latfield = options.latfield || '',\n        lonfield = options.lonfield || '',\n        crs = options.crs || '';\n\n    var features = [],\n        featurecollection = { type: 'FeatureCollection', features: features };\n\n    if (crs !== '') {\n        featurecollection.crs = { type: 'name', properties: { name: crs } };\n    }\n\n    if (options.delimiter === 'auto' && typeof x == 'string') {\n        options.delimiter = autoDelimiter(x);\n        if (!options.delimiter) return callback({\n            type: 'Error',\n            message: 'Could not autodetect delimiter'\n        });\n    }\n\n    var parsed = (typeof x == 'string') ? dsv(options.delimiter).parse(x) : x;\n\n    if (!parsed.length) return callback(null, featurecollection);\n\n    if (!latfield || !lonfield) {\n        for (var f in parsed[0]) {\n            if (!latfield && isLat(f)) latfield = f;\n            if (!lonfield && isLon(f)) lonfield = f;\n        }\n        if (!latfield || !lonfield) {\n            var fields = [];\n            for (var k in parsed[0]) fields.push(k);\n            return callback({\n                type: 'Error',\n                message: 'Latitude and longitude fields not present',\n                data: parsed,\n                fields: fields\n            });\n        }\n    }\n\n    var errors = [];\n\n    for (var i = 0; i < parsed.length; i++) {\n        if (parsed[i][lonfield] !== undefined &&\n            parsed[i][lonfield] !== undefined) {\n\n            var lonk = parsed[i][lonfield],\n                latk = parsed[i][latfield],\n                lonf, latf,\n                a;\n\n            a = sexagesimal(lonk, 'EW');\n            if (a) lonk = a;\n            a = sexagesimal(latk, 'NS');\n            if (a) latk = a;\n\n            lonf = parseFloat(lonk);\n            latf = parseFloat(latk);\n\n            if (isNaN(lonf) ||\n                isNaN(latf)) {\n                errors.push({\n                    message: 'A row contained an invalid value for latitude or longitude',\n                    row: parsed[i]\n                });\n            } else {\n                if (!options.includeLatLon) {\n                    delete parsed[i][lonfield];\n                    delete parsed[i][latfield];\n                }\n\n                features.push({\n                    type: 'Feature',\n                    properties: parsed[i],\n                    geometry: {\n                        type: 'Point',\n                        coordinates: [\n                            parseFloat(lonf),\n                            parseFloat(latf)\n                        ]\n                    }\n                });\n            }\n        }\n    }\n\n    callback(errors.length ? errors: null, featurecollection);\n}\n\nfunction toLine(gj) {\n    var features = gj.features;\n    var line = {\n        type: 'Feature',\n        geometry: {\n            type: 'LineString',\n            coordinates: []\n        }\n    };\n    for (var i = 0; i < features.length; i++) {\n        line.geometry.coordinates.push(features[i].geometry.coordinates);\n    }\n    line.properties = features[0].properties;\n    return {\n        type: 'FeatureCollection',\n        features: [line]\n    };\n}\n\nfunction toPolygon(gj) {\n    var features = gj.features;\n    var poly = {\n        type: 'Feature',\n        geometry: {\n            type: 'Polygon',\n            coordinates: [[]]\n        }\n    };\n    for (var i = 0; i < features.length; i++) {\n        poly.geometry.coordinates[0].push(features[i].geometry.coordinates);\n    }\n    poly.properties = features[0].properties;\n    return {\n        type: 'FeatureCollection',\n        features: [poly]\n    };\n}\n\nmodule.exports = {\n    isLon: isLon,\n    isLat: isLat,\n    csv: dsv.csv.parse,\n    tsv: dsv.tsv.parse,\n    dsv: dsv,\n    auto: auto,\n    csv2geojson: csv2geojson,\n    toLine: toLine,\n    toPolygon: toPolygon\n};\n\n},{\"dsv\":2,\"sexagesimal\":3}],2:[function(require,module,exports){\n\n\nmodule.exports = new Function(\"dsv.version = \\\"0.0.3\\\";\\n\\ndsv.tsv = dsv(\\\"\\\\t\\\");\\ndsv.csv = dsv(\\\",\\\");\\n\\nfunction dsv(delimiter) {\\n  var dsv = {},\\n      reFormat = new RegExp(\\\"[\\\\\\\"\\\" + delimiter + \\\"\\\\n]\\\"),\\n      delimiterCode = delimiter.charCodeAt(0);\\n\\n  dsv.parse = function(text, f) {\\n    var o;\\n    return dsv.parseRows(text, function(row, i) {\\n      if (o) return o(row, i - 1);\\n      var a = new Function(\\\"d\\\", \\\"return {\\\" + row.map(function(name, i) {\\n        return JSON.stringify(name) + \\\": d[\\\" + i + \\\"]\\\";\\n      }).join(\\\",\\\") + \\\"}\\\");\\n      o = f ? function(row, i) { return f(a(row), i); } : a;\\n    });\\n  };\\n\\n  dsv.parseRows = function(text, f) {\\n    var EOL = {}, // sentinel value for end-of-line\\n        EOF = {}, // sentinel value for end-of-file\\n        rows = [], // output rows\\n        N = text.length,\\n        I = 0, // current character index\\n        n = 0, // the current line number\\n        t, // the current token\\n        eol; // is the current token followed by EOL?\\n\\n    function token() {\\n      if (I >= N) return EOF; // special case: end of file\\n      if (eol) return eol = false, EOL; // special case: end of line\\n\\n      // special case: quotes\\n      var j = I;\\n      if (text.charCodeAt(j) === 34) {\\n        var i = j;\\n        while (i++ < N) {\\n          if (text.charCodeAt(i) === 34) {\\n            if (text.charCodeAt(i + 1) !== 34) break;\\n            ++i;\\n          }\\n        }\\n        I = i + 2;\\n        var c = text.charCodeAt(i + 1);\\n        if (c === 13) {\\n          eol = true;\\n          if (text.charCodeAt(i + 2) === 10) ++I;\\n        } else if (c === 10) {\\n          eol = true;\\n        }\\n        return text.substring(j + 1, i).replace(/\\\"\\\"/g, \\\"\\\\\\\"\\\");\\n      }\\n\\n      // common case: find next delimiter or newline\\n      while (I < N) {\\n        var c = text.charCodeAt(I++), k = 1;\\n        if (c === 10) eol = true; // \\\\n\\n        else if (c === 13) { eol = true; if (text.charCodeAt(I) === 10) ++I, ++k; } // \\\\r|\\\\r\\\\n\\n        else if (c !== delimiterCode) continue;\\n        return text.substring(j, I - k);\\n      }\\n\\n      // special case: last token before EOF\\n      return text.substring(j);\\n    }\\n\\n    while ((t = token()) !== EOF) {\\n      var a = [];\\n      while (t !== EOL && t !== EOF) {\\n        a.push(t);\\n        t = token();\\n      }\\n      if (f && !(a = f(a, n++))) continue;\\n      rows.push(a);\\n    }\\n\\n    return rows;\\n  };\\n\\n  dsv.format = function(rows) {\\n    if (Array.isArray(rows[0])) return dsv.formatRows(rows); // deprecated; use formatRows\\n    var fieldSet = {}, fields = [];\\n\\n    // Compute unique fields in order of discovery.\\n    rows.forEach(function(row) {\\n      for (var field in row) {\\n        if (!(field in fieldSet)) {\\n          fields.push(fieldSet[field] = field);\\n        }\\n      }\\n    });\\n\\n    return [fields.map(formatValue).join(delimiter)].concat(rows.map(function(row) {\\n      return fields.map(function(field) {\\n        return formatValue(row[field]);\\n      }).join(delimiter);\\n    })).join(\\\"\\\\n\\\");\\n  };\\n\\n  dsv.formatRows = function(rows) {\\n    return rows.map(formatRow).join(\\\"\\\\n\\\");\\n  };\\n\\n  function formatRow(row) {\\n    return row.map(formatValue).join(delimiter);\\n  }\\n\\n  function formatValue(text) {\\n    return reFormat.test(text) ? \\\"\\\\\\\"\\\" + text.replace(/\\\\\\\"/g, \\\"\\\\\\\"\\\\\\\"\\\") + \\\"\\\\\\\"\\\" : text;\\n  }\\n\\n  return dsv;\\n}\\n\" + \";return dsv\")();\n\n},{}],3:[function(require,module,exports){\nmodule.exports = element;\nmodule.exports.pair = pair;\nmodule.exports.format = format;\nmodule.exports.formatPair = formatPair;\n\nfunction element(x, dims) {\n    return search(x, dims).val;\n}\n\nfunction formatPair(x) {\n    return format(x.lat, 'lat') + ' ' + format(x.lon, 'lon');\n}\n\n// Is 0 North or South?\nfunction format(x, dim) {\n    var dirs = {\n            lat: ['N', 'S'],\n            lon: ['E', 'W']\n        }[dim] || '',\n        dir = dirs[x >= 0 ? 0 : 1],\n        abs = Math.abs(x),\n        whole = Math.floor(abs),\n        fraction = abs - whole,\n        fractionMinutes = fraction * 60,\n        minutes = Math.floor(fractionMinutes),\n        seconds = Math.floor((fractionMinutes - minutes) * 60);\n\n    return whole + '° ' +\n        (minutes ? minutes + \"' \" : '') +\n        (seconds ? seconds + '\" ' : '') + dir;\n}\n\nfunction search(x, dims, r) {\n    if (!dims) dims = 'NSEW';\n    if (typeof x !== 'string') return { val: null, regex: r };\n    r = r || /[\\s\\,]*([\\-|\\—|\\―]?[0-9.]+)°? *(?:([0-9.]+)['’′‘] *)?(?:([0-9.]+)(?:''|\"|”|″) *)?([NSEW])?/gi;\n    var m = r.exec(x);\n    if (!m) return { val: null, regex: r };\n    else if (m[4] && dims.indexOf(m[4]) === -1) return { val: null, regex: r };\n    else return {\n        val: (((m[1]) ? parseFloat(m[1]) : 0) +\n            ((m[2] ? parseFloat(m[2]) / 60 : 0)) +\n            ((m[3] ? parseFloat(m[3]) / 3600 : 0))) *\n            ((m[4] && m[4] === 'S' || m[4] === 'W') ? -1 : 1),\n        regex: r,\n        raw: m[0],\n        dim: m[4]\n    };\n}\n\nfunction pair(x, dims) {\n    x = x.trim();\n    var one = search(x, dims);\n    if (one.val === null) return null;\n    var two = search(x, dims, one.regex);\n    if (two.val === null) return null;\n    // null if one/two are not contiguous.\n    if (one.raw + two.raw !== x) return null;\n    if (one.dim) return swapdim(one.val, two.val, one.dim);\n    else return [one.val, two.val];\n}\n\nfunction swapdim(a, b, dim) {\n    if (dim == 'N' || dim == 'S') return [a, b];\n    if (dim == 'W' || dim == 'E') return [b, a];\n}\n\n},{}]},{},[1])(1)\n});"]}