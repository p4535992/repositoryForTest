<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:mvc="http://www.springframework.org/schema/mvc"
             xmlns:tx="http://www.springframework.org/schema/tx"
             xmlns:mongo="http://www.springframework.org/schema/data/mongo"
             xmlns:webflow-config="http://www.springframework.org/schema/webflow-config"
             xmlns:util="http://www.springframework.org/schema/util"
             xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo.xsd
		http://www.springframework.org/schema/webflow-config http://www.springframework.org/schema/webflow-config/spring-webflow-config.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		">

    <!-- **************************************************************** -->
    <!--  THYMELEAF-SPECIFIC ARTIFACTS                                    -->
    <!--  TemplateResolver <- TemplateEngine <- ViewResolver              -->
    <!-- **************************************************************** -->

    <!-- Note that you shouldn’t use this dialect directly in a normal TemplateEngine object as a part of its
    configuration. Instead, you should instance a new template engine class that performs all the required configuration
     steps: org.thymeleaf.spring4.SpringTemplateEngine.-->
    <!--<beans:bean id="templateResolver" class="org.thymeleaf.templateresolver.ServletContextTemplateResolver">
        <beans:property name="prefix" value="/WEB-INF/templates/" />
        <beans:property name="suffix" value=".html" />
        <beans:property name="templateMode" value="HTML5" />
    </beans:bean>-->

    <beans:bean id="templateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine">
        <beans:property name="templateResolver" ref="templateResolver" />
    </beans:bean>

    <!-- Configuration of the Thymeleaf View Resolver is very similar to that of JSP’s:-->

    <beans:bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver">
        <beans:property name="templateEngine" ref="templateEngine" />
        <beans:property name="order" value="1" />
        <beans:property name="viewNames" value="*.html,*.xhtml" />
    </beans:bean>

    <!-- And what if we wanted to define a View bean and add some static variables to it? Easy: -->
    <beans:bean name="main" class="org.thymeleaf.spring4.view.ThymeleafView">
        <beans:property name="staticVariables">
            <beans:map>
                <beans:entry key="footer" value="Some company: &lt;b&gt;ACME&lt;/b&gt;" />
            </beans:map>
        </beans:property>
    </beans:bean>

    <!-- This template resolver will allow applications to resolve templates using the standard Spring resource
    resolution syntax. It can be configured like: -->
    <beans:bean id="templateResolver" class="org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver">
        <beans:property name="prefix" value="/WEB-INF/templates/" />
        <beans:property name="suffix" value=".html" />
        <beans:property name="templateMode" value="HTML5" />
    </beans:bean>

    <!-- And this will allow you to use view names like:
    @RequestMapping("/doit")
    public String doIt() {
    ...
    return "classpath:resources/templates/doit";
    }-->


</beans:beans>