<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
	    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:mvc="http://www.springframework.org/schema/mvc"
		xmlns:security="http://www.springframework.org/schema/security"
        xmlns:beans="http://www.springframework.org/schema/beans"
        xmlns:mongo="http://www.springframework.org/schema/data/mongo"
		xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
			http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo.xsd">

    <!-- ================================================================================== -->
    <!-- Global Security Settings -->
    <!-- ================================================================================== -->

    <!-- This allows authorizaion annotations to be used in our classes. See the Controllers. -->

    <security:global-method-security pre-post-annotations="enabled" />

    <!-- ================================================================================== -->
    <!-- Static Content Security -->
    <!-- ================================================================================== -->

    <!-- This is here to ensure that the static content (JavaScript, CSS, etc) is accessible -->
    <!-- from the login page without authentication -->

    <security:http security="none" pattern="/resources" />

    <!-- ================================================================================== -->
    <!-- Form and Security Access Configuration -->
    <!-- ================================================================================== -->

    <!-- Below is the configuration for the login form. The first line does the following: -->
    <!-- use-expressions: this allows us to use expressions in our intercept-url access configuration. -->
    <!-- access-denied-page: this is the page users will be redirected to when they try to access protected areas. -->
    <!-- disable-url-rewriting: this avoids having the JSESSIONID plastered in the URL -->
	<security:http  use-expressions="true"  disable-url-rewriting="true">
        <!-- The intercept-url configuration is where we specify what roles are allowed access to what areas. -->
        <!-- We specifically force the connection to https for all the pages, although it could be sufficient -->
        <!-- just on the login page. The access parameter is where the expressions are used to control which  -->
        <!-- roles can access specific areas. One of the most important things is the order of the intercept-urls, -->
        <!-- the most catch-all type patterns should at the bottom of the list as the matches are executed -->
        <!-- in the order they are configured below. So /** should always be at the bottom of the list. -->
        <!--<security:intercept-url requires-channel="https" pattern="/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" />-->
        <security:intercept-url pattern="/geodocuments/add" access="hasRole('ROLE_USER')"/>
        <security:intercept-url requires-channel="https" pattern="/login*" access="isAnonymous()" />
        <security:intercept-url requires-channel="https" pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
        <!-- The session management is used to ensure the user only has one session. This isn't -->
        <!-- compulsory but can add some extra security to your application. -->
        <!--<security:session-management invalid-session-url="/login?time=1">-->
            <!--<security:concurrency-control max-sessions="1" expired-url="/login?time=1" />-->
        <!--</security:session-management>-->

        <!-- This is where we configure our login form. -->
        <!-- login-page: the page that contains the login screen -->
        <!-- login-processing-url: this is the URL to which the login form should be submitted -->
        <!-- default-target-url: the URL to which the user will be redirected if they login successfully -->
        <!-- authentication-failure-url: the URL to which the user will be redirected if they fail login -->
        <!-- username-parameter: the name of the request parameter which contains the username -->
        <!-- password-parameter: the name of the request parameter which contains the password -->
		<security:form-login login-page="/login" 
							 default-target-url="/geodocuments/add"
                             always-use-default-target="true"
							 authentication-failure-url="/loginfailed"
							 login-processing-url="/login.do"
                             username-parameter="username"
                             password-parameter="password"
							 />

        <!-- This is where the logout page and process is configured. The logout-url is the URL to send -->
        <!-- the user to in order to logout, the logout-success-url is where they are taken if the logout -->
        <!-- is successful, and the delete-cookies and invalidate-session make sure that we clean up after logout -->
		<security:logout logout-url="/logout"  logout-success-url="/login?out=1" delete-cookies="JSESSIONID" invalidate-session="true"/>
        <!--<logout logout-url="/logout" logout-success-url="/login?out=1" delete-cookies="JSESSIONID" invalidate-session="true" />-->
	</security:http>

	<security:authentication-manager alias="authenticationManager">
        <!-- The authentication provider below uses MongoDB to store SHA1 hashed passwords -->
        <!-- To see how to configure users for the example below, please see the README file -->

        <!--<security:authentication-provider user-service-ref="loginService">-->
            <!--<security:password-encoder hash="sha" />-->
        <!--</security:authentication-provider>-->

        <!-- Manual Username And Password-->

		<security:authentication-provider>
            <!--<security:password-encoder hash="sha" />-->
			<security:user-service>
				<security:user name="Admin" password="Admin123" authorities="ROLE_USER" />
			</security:user-service>
		</security:authentication-provider>

        <!-- The authentication provider below is the simplest provider you can use -->
        <!-- The users, their passwords and roles are all added as clear text -->

         <!--<security:authentication-provider> -->
             <!--<security:user-service> -->
                 <!--<security:user name="admin" password="admin" authorities="ROLE_ADMIN" /> -->
                 <!--<security:user name="user" password="user" authorities="ROLE_USER" /> -->
             <!--</securiSty:user-service> -->
         <!--</security:authentication-provider> -->


        <!-- The authentication provider below hashes incoming passwords using SHA1 -->
        <!-- The users passwords below are hashed using SHA1 (see README for values) -->

        <!-- <authentication-provider> -->
        <!-- <password-encoder hash="sha" /> -->
        <!-- <user-service> -->
        <!-- <user name="admin" password="d033e22ae348aeb5660fc2140aec35850c4da997" authorities="ROLE_ADMIN" /> -->
        <!-- <user name="user" password="12dea96fec20593566ab75692c9949596833adc9" authorities="ROLE_USER" /> -->
        <!-- </user-service> -->
        <!-- </authentication-provider> -->


        <!-- The authentication provider below uses JDBC to retrieve your credentials  -->
        <!-- The data source bean configuration can be found at the bottom of this file -->
        <!-- The first example uses the default Spring Security tables, see link below -->
        <!-- http://docs.spring.io/spring-security/site/docs/3.0.x/reference/appendix-schema.html -->

        <!-- <authentication-provider> -->
        <!-- <jdbc-user-service data-source-ref="dataSource" /> -->
        <!-- <password-encoder hash="sha" /> -->
        <!-- </authentication-provider> -->

        <!-- The second example shows how you can override the default queries in order -->
        <!-- to use your own tables rather than Spring Security's default tables -->
        <!-- The SQL is relatively simple and should be easy to figure out and map to your needs -->

        <!-- <authentication-provider> -->
        <!-- <jdbc-user-service data-source-ref="dataSource" -->
        <!-- users-by-username-query="select username,password from users where username=?" -->
        <!-- authorities-by-username-query="select u.username, r.authority from users u, roles r where u.userid = r.userid and u.username =?" /> -->
        <!-- </authentication-provider> -->
	</security:authentication-manager>

    <!-- ================================================================================== -->
    <!-- Beans used by the Authentication Providers											-->
    <!-- ================================================================================== -->

    <!-- Sample JDBC data source for use with the JDBC Authentication Provider -->
    <!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> -->
    <!-- <property name="driverClassName" value="com.mysql.jdbc.Driver" /> -->
    <!-- <property name="url" value="jdbc:mysql://localhost:3306/codehustler" /> -->
    <!-- <property name="username" value="root" /> -->
    <!-- <property name="password" value="password" /> -->
    <!-- </bean> -->

    <!-- ================================================================================== -->
    <!-- MongoDB and Morphia Initialisation                                                 -->
    <!-- ================================================================================== -->
    <!--<beans:bean id="loginService" class="org.p4535992.mvc.service.LoginService"/>-->
    <!--<beans:bean id="mongo" scope="singleton" class="com.mongodb.MongoClient">-->
        <!--<beans:constructor-arg index="0">-->
            <!--<beans:bean id="repOne" class="com.mongodb.ServerAddress">-->
                <!--<beans:constructor-arg index="0" type="java.lang.String" value="127.0.0.1" />-->
            <!--</beans:bean>-->
        <!--</beans:constructor-arg>-->
    <!--</beans:bean>-->

    <!--<beans:bean id="morphia" scope="singleton" class="org.mongodb.morphia.Morphia" />-->
    <!--&lt;!&ndash;<beans:bean id="loginService" class="org.p4535992.mvc.service.LoginService"/>&ndash;&gt;-->

    <!--<beans:bean id="datastore" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">-->
        <!--<beans:property name="targetObject" ref="morphia"/>-->
        <!--<beans:property name="targetMethod" value="createDatastore"/>-->
        <!--<beans:property name="arguments">-->
            <!--<beans:list>-->
                <!--<beans:ref bean="mongo"/>-->
                <!--&lt;!&ndash; Name Mongo DB&ndash;&gt;-->
                <!--<beans:value>users</beans:value>-->
            <!--</beans:list>-->
        <!--</beans:property>-->
    <!--</beans:bean>-->
</beans>	