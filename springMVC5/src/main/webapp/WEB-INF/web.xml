<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app.xsd">



	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	
	<!-- Configuration locations must consist of one or more comma- or space-delimited
       fully-qualified @Configuration classes. Fully-qualified packages may also be
       specified for component-scanning -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath:spring/integration.xml,
			classpath:spring/security-context.xml
		</param-value>
	</context-param>
	
	<!-- Configure ContextLoaderListener to use AnnotationConfigWebApplicationContext
       instead of the default XmlWebApplicationContext -->
<!-- 	<context-param> -->
<!-- 	  <param-name>contextClass</param-name> -->
<!-- 	  <param-value> -->
<!-- 	  		org.springframework.web.context.support.AnnotationConfigWebApplicationContext -->
<!-- 	  </param-value> -->
<!-- 	</context-param> -->
	
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>contextAttribute</param-name>
			<param-value>org.springframework.web.context.WebApplicationContext.ROOT</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- Listener to support spring security-->
	<listener>
  	  <listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
	</listener>
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>
				/WEB-INF/spring/appServlet/servlet-context.xml
			</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<!-- Character Encoding Filter -->
	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- These need to be mapped against the default servlet for the CSS / JS to work -->
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>/resources/*</url-pattern>
	</servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.css</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.js</url-pattern>
    </servlet-mapping>


	<!--To add this servlet to your web-application, add the following lines to its WEB-INF/web.xml file.
	http://logback.qos.ch/manual/configuration.html -->
	<servlet>
		<servlet-name>ViewStatusMessages</servlet-name>
		<servlet-class>ch.qos.logback.classic.ViewStatusMessagesServlet</servlet-class>
	</servlet>

	<servlet-mapping>
		<servlet-name>ViewStatusMessages</servlet-name>
		<url-pattern>/lbClassicStatus</url-pattern>
	</servlet-mapping>


	<!-- JSPs -->
	<!--<welcome-file-list>
		<welcome-file>main.jsp</welcome-file>
		<welcome-file>home.jsp</welcome-file>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>-->
	<!--<servlet>-->
		<!--<servlet-name>403Jsp</servlet-name>-->
		<!--<jsp-file>/403.jsp</jsp-file>-->
	<!--</servlet>-->
	<!--<servlet-mapping>-->
		<!--<servlet-name>403Jsp</servlet-name>-->
		<!--<url-pattern>/403</url-pattern>-->
	<!--</servlet-mapping>-->


	<!-- The error page -->
	<!--<error-page>-->
		<!--<error-code>403</error-code>-->
		<!--<location>/403</location>-->
	<!--</error-page>-->


	<!--<session-config>-->
	<!--<session-timeout>1440</session-timeout>-->
	<!--</session-config>-->

	<!-- his is necessary in order to make the JNDI DataSource available to the application under
	 the specified namespace jdbc/UsersDB. -->
	<!--<resource-ref>-->
		<!--<description>DB Connection</description>-->
		<!--<res-ref-name>jdbc/UsersDB</res-ref-name>-->
		<!--<res-type>javax.sql.DataSource</res-type>-->
		<!--<res-auth>Container</res-auth>-->
	<!--</resource-ref>-->

</web-app>
